// Generated by CoffeeScript 1.9.3
(function() {
  var Alert, checkAndSet, info, init, log, onNewMessage, onSend, root, setName, updateUserList,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Alert = function() {
    var arg;
    arg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return alert(arg.join(''));
  };

  log = function() {
    var arg, i, j, len;
    arg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    for (j = 0, len = arg.length; j < len; j++) {
      i = arg[j];
      console.log(i);
    }
    return $('#log').prepend("<p>" + (arg.join(" ")) + "</p>");
  };

  info = function() {
    var arg, i, j, len, results;
    arg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    results = [];
    for (j = 0, len = arg.length; j < len; j++) {
      i = arg[j];
      console.info(i);
      results.push($('#log').prepend("<p>" + i + "</p>"));
    }
    return results;
  };

  init = function() {
    root.BaseRef = new Firebase("https://e0za0ct8s6t.firebaseio-demo.com/");
    root.messagesRef = BaseRef.child('messages');
    root.userListRef = BaseRef.child('userList');
    root.nameRef = userListRef.push();
    nameRef.onDisconnect().remove();
    root.currentname = '';
    userListRef.on('value', function(snapshot) {
      root.userList = [];
      snapshot.forEach(function(childSnapshot) {
        userList.push(childSnapshot.val());
        return false;
      });
      return updateUserList();
    });
    root.messageField = $('#messageInput');
    root.nameField = $('#nameInput');
    root.messageList = $('#messages');
    messageField.keypress(function(e) {
      if (e.keyCode === 13) {
        return onSend();
      }
    });
    nameField.keypress(function(e) {
      if (e.keyCode === 13) {
        return document.getElementById('#messageInput').focus();
      }
    });
    messagesRef.limitToLast(10).on('child_added', onNewMessage);
    setIdleTimeout(5000);
    setAwayTimeout(10000);
    document.getElementById('nameInput').focus();
    return nameField.blur(checkAndSet);
  };

  checkAndSet = function(name) {
    name = nameField.val();
    if (name === '') {
      document.getElementById('nameInput').focus();
      return false;
    } else if (name === currentname) {
      return true;
    } else if (name.length >= 20) {
      document.getElementById('nameInput').focus();
      return false;
    } else if (indexOf.call(userList, name) >= 0) {
      Alert("不可设置与在线用户相同的用户名");
      document.getElementById('nameInput').focus();
      return false;
    } else {
      setName(name);
      return true;
    }
  };

  updateUserList = function() {
    var i, j, len, online, results;
    online = $('#onlineUsers');
    online.empty();
    if (root.currentname === '') {
      online.append($('<p>').append('* Unnamed'));
    } else {
      online.append($('<p>').append('*' + currentname));
    }
    results = [];
    for (j = 0, len = userList.length; j < len; j++) {
      i = userList[j];
      if (i !== currentname) {
        results.push(online.append($('<p>').append(i)));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  setName = function(name) {
    this.currentname = name;
    return nameRef.set(name);
  };

  onSend = function() {
    var name, text;
    name = nameField.val();
    text = messageField.val();
    if (checkAndSet(name)) {
      messagesRef.push({
        name: name,
        text: text
      });
    }
    return messageField.val('');
  };

  onNewMessage = function(snapshot) {
    var AddNewMessage, data, message, username;
    AddNewMessage = function() {
      var messageElement, msg, name;
      messageElement = $("<li>");
      msg = $('<p>').text(message);
      name = $("<strong class='chat-username'></strong>").text(username);
      if (username === currentname) {
        messageElement.css('text-align', 'right');
      }
      messageElement.append(name).append(msg);
      messageList.append(messageElement);
      return messageList[0].scrollTop = messageList[0].scrollHeight;
    };
    data = snapshot.val();
    username = data.name;
    message = data.text;
    return AddNewMessage();
  };

  window.onload = function() {
    return init();
  };

}).call(this);
